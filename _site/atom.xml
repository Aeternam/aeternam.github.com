<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>{insane => }</title>
 <link href="http://aeternam.github.com/atom.xml" rel="self"/>
 <link href="http://aeternam.github.com"/>
 <updated>2012-06-04T09:47:28+08:00</updated>
 <id>http://aeternam.github.com</id>
 <author>
   <name>Robby Lee</name>
   <email></email>
 </author>

 
 <entry>
   <title>一个实现bash中旋转的菊花的snippet</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2012-03-30T02:53:00Z</updated>
   <id>http://aeternam.github.com./一个实现bash中旋转的菊花的snippet</id>
   <content type="html">shell脚本中某些需要等待的步骤我们通常的做法是输出一个旋转的线段,代码如下&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;i&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;
sp&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\|&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #904050;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #00dddd;&quot;&gt;-n&lt;/span&gt; &lt;span style=&quot;color: #00c4c4;&quot;&gt;' '&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #00dddd;&quot;&gt;true&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;do&lt;/span&gt;
    &lt;span style=&quot;color: #904050;&quot;&gt;printf&lt;/span&gt; &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\b&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;${sp:i++%${#sp}:1}&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
这其中用到了退格符.&lt;br /&gt;
((EOF))&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-5677227188116491702?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/TIeL1kGtGWqSHLpDnx0SC3jyXD4/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/TIeL1kGtGWqSHLpDnx0SC3jyXD4/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/TIeL1kGtGWqSHLpDnx0SC3jyXD4/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/TIeL1kGtGWqSHLpDnx0SC3jyXD4/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/3w1K0-TyoPA&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>应用expect让ssh -D开机启动</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2012-01-30T09:25:00Z</updated>
   <id>http://aeternam.github.com./应用expect让ssh--D开机启动</id>
   <content type="html">&lt;span style=&quot;font-size: large;&quot;&gt;脚本&lt;/span&gt;：&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #9999a9;&quot;&gt;#!/usr/bin/expect&lt;/span&gt;


&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; timeout &lt;span style=&quot;color: #008c00;&quot;&gt;20&lt;/span&gt;
&lt;span style=&quot;color: #9999a9;&quot;&gt;#set command ssh&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; parameter1 &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;-qTfnN&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; parameter2 &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;-D&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; port &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;7070&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; loginname &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;root&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; password &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;123456&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;set&lt;/span&gt; url &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;www.yoursshaddr.net&quot;&lt;/span&gt;

spawn ssh $parameter1 $parameter2 $port $loginname@$url
expect &lt;span style=&quot;color: #00c4c4;&quot;&gt;&quot;password:&quot;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;send&lt;/span&gt; $password
&lt;/pre&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: large;&quot;&gt;如有需要请自行将代码的第二段中的用户名、密码、主机地址等信息更改。&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: large;&quot;&gt;然后将该脚本加入到开机启动中，比如ubuntu中是这样&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;a href=&quot;http://farm8.staticflickr.com/7010/6788263729_be69c52b51_d.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://farm8.staticflickr.com/7010/6788263729_be69c52b51_d.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;span style=&quot;font-size: large;&quot;&gt;搞定，收工！&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-size: large;&quot;&gt;((EOF))&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-5772286033266686450?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/bQ7zAiMDGA-DdZoHrbahIhKDh6Y/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/bQ7zAiMDGA-DdZoHrbahIhKDh6Y/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/bQ7zAiMDGA-DdZoHrbahIhKDh6Y/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/bQ7zAiMDGA-DdZoHrbahIhKDh6Y/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/40eWJkxw244&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>为什么函数式编程至关重要？（二）</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2012-01-03T08:40:00Z</updated>
   <id>http://aeternam.github.com./为什么函数式编程至关重要？（二）</id>
   <content type="html">&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

5 人工智能中的例子&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
我们已经指出，函数式语言威力强大主要是因为它们提供了两种新的黏合剂：高阶函数和惰性求值。在本节中，我们将讨论人工智能中一个大一点的实例，并演示如何使用这两种黏合剂来十分简单地编写它。&lt;br /&gt;
&lt;br /&gt;
我们选取的实例是alpha-beta“启发式搜索”，一个用于估计游戏者所处形势好坏的算法。该算法预测游戏局势的可能发展，但会避免对无意义局势的进一步探究。&lt;br /&gt;
&lt;br /&gt;
令游戏局势使用“position”类型的对象来表示。这个类型依据游戏的不同而不同，我们不对此作任何假定。必然有一种方法可以知晓对某一个局势能够采取的行动：假定有一个函数：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;moves: position -&amp;gt; listof position&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
该函数以一个游戏局势为参数，并返回一个可以由自变量出发，通过一步行动而形成的position的列表。以noughts and crosses游戏（tic-tac-toe）为例：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;| |      X| |   |X|   | |
     -+-+-     -+-+- -+-+- -+-+-
moves | |   = [ | | , | | , |X| ]
     -+-+-     -+-+- -+-+- -+-+-
      | |       | |   | |   | |
       
      | |    O| |   |O|
     -+-+-   -+-+- -+-+-
moves |X| = [ |X| , |X| ]
     -+-+-   -+-+- -+-+-
      | |     | |   | |&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这个函数假定通过当前局势总是可以判定现在是哪位游戏者的回合。在noughts and crosses中，可以通过数出“0”与“X”的数目来做到这一点。在类似于象棋的游戏中，可能必须在“position”类型中显式包含这一信息。&lt;br /&gt;
&lt;br /&gt;
利 用函数moves，第一步是构造一棵博弈树。这棵树的结点都用局势来标记，而一个结点的子结点用从该结点一步便可到达的局势标记。也就是说，如果一个结点 标记为局势p，那么它的子结点将使用(moves p)中的局势来标记。一棵博弈树完全有可能是无穷的，如果这个游戏可以在双方都不胜的情形下永远进行下去的话。博弈树与第2节中讨论的树完全类似——每个 结点都有一个标记（它所代表的局势）与一个子结点列表。因此我们可以使用相同的数据类型来表示它们。&lt;br /&gt;
&lt;br /&gt;
博弈树是通过反复运用moves而构造出来的。构造从根局势开始，moves用于生成根结点处子树的标记，而后moves被用于生成子树的子树，依此类推。这一递归模式可以用一个高阶函数表示：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;reptree f a = node a (map (reptree f) (f a))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
使用这个函数可以定义另一个函数，该函数从一个特定的局势开始生成博弈树：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;gametree p = reptree moves p&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
例如图1所示。此处使用的高阶函数(reptree）与上一节中用于构造无穷列表的函数repeat是类似的。&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;| |
         -+-+-
gametree  | |
         -+-+-
          | |
                            | |
                           -+-+-
=                           | |
                           -+-+-
                            | |
                          /  |  \
                         /   |   \
                        /    |    \
                       /     |     \
                      /      |      \
                     /       |       \
                 X| |       |X|      | |
                 -+-+-     -+-+-    -+-+-
                  | |       | |      |X|
                 -+-+-     -+-+-    -+-+-
                  | |       | |      | |
                  /|\       /|\       /\
                  ...       ...      /  \
                                    /    \
                                   /      \
                               O| |       |O|
                               -+-+-     -+-+-
                                |X|       |X|
                               -+-+-     -+-+-
                                | |       | |
                                /|\       /|\
                                ...       ...&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
图1： 一棵博弈树的实例&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
alpha -beta算法从一个给定的局势出发，就游戏的发展将会是有利还是不利作出判断。然而，要做到这一点，它必须能够在不考虑下一步的情况下粗略地估计某一个 局势的“价值”。在后继局势不可预测时必须使用这一函数，它也可以用来对算法进行先期引导。静态估价的结果是从计算机的角度考虑的，是对该局势的前途的度 量（假设在游戏中计算机与人对抗）。结果越大，局势对计算机而言越好。结果越小，局势越糟。最简单的此类函数将会，比如说，对计算机确定胜利的局势返回+ 1，对计算机确定失败的局势返回-1，而对其它的局势返回0。在现实中，静态估价函数会衡量各种使局势“看上去不错”的因素。例如，具体的好处，以及象棋 中对中心的控制。假定有这样一个函数：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;static: position -&amp;gt; number&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
既然一棵博弈树是一个(treeof position)，那么它就可以被函数(maptree static)转换为一个(treeof number)，该函数对树中所有的（也许是无穷多个）局势进行静态估价。此处使用了第2节中定义的函数maptree。&lt;br /&gt;
&lt;br /&gt;
给 出一棵静态估价树之后，其中各个局势的真值究竟是多大？特别地，对根局势应该赋予什么值？不是它的静态值，因为那只是一个粗略的猜测。一个结点被赋予的 值，必须由其子结点的真值决定。这一过程的完成，基于每个游戏者都会选择对自己最有利的行动的假定。回忆一下，高值意味着计算机的有利形势。很明显，当计 算机从任意的局势开始下一步行动时，它将选择通往真值最高的子结点的行动。类似地，对手将会选择通往真值最低的子结点的行动。假定计算机与其对手轮流行 动，那么当轮到计算机行动时，节点的真值用函数maximise计算，反之用minimise计算。&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;maximise (node n sub) = max (map minimise sub)
minimise (node n sub) = min (map maximise sub)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
此处max和min是关于列表的函数，分别返回列表中元素的最大值与最小值。上述定义是不完整的，因为它们将永远递归下去——没有给出边界情形。我们必须 定 义没有后继的结点的值（其标记）。因此静态估价用于任一游戏者胜利或者后继局势不可预测的情况下。maximise与minimise的完整定义是：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;maximise (node n nil) = n
maximise (node n sub) = max (map minimise sub)
maximise (node n nil) = n
maximise (node n sub) = min (map minimise sub)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在这个阶段，几乎已经可以写出一个取一个局势作为参数并返回其真值的函数了。可能是：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;evaluate = maximise . maptree static . gametree&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这个定义有两个问题。首先，它不适用于无穷树。maximise不断地递归直到找到一个没有子树的结点——树的端点。如果没有端点那么maximise就 不会返回结果。第二个问题与第一个有关——甚至有穷的博弈树（如noughts and crosses里的那棵）事实上也可能相当大。估价整棵博弈树是不现实的——搜索必须被限定在接下去的几步之内。为此可以将树剪至一个固定的深度：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;prune 0 (node a x) = node a nil
prune n (node a x) = node a (map (prune (n-1)) x)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
(prune n)取一棵树作为参数并“剪去”与根结点的距离超过n的所有结点。如果一棵博弈树被剪枝，那么将强制maximise对深度为n的结点执行静态估价而不是进一步递归。因此evaluate可以被定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;evaluate = maximise . maptree static . prune 5 . gametree&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这将考虑其后（比如说）5步的形势。&lt;br /&gt;
&lt;br /&gt;
在 此开发过程中我们已经使用了高阶函数与惰性求值。高阶函数reptree和maptree使得我们能够很容易地构造与处理博弈树。更重要的是，惰性求值确 保了我们可以使用这种方式模块化evaluate。由于博弈树具有潜在的无穷结果，在没有惰性求值的情况下，程序将永远不会终止。我们将不能写：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;prune 5 . gametree&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
而不得不将这两个函数整合成一个只构造树的前五层的函数。更糟糕的是，甚至那前五层都可能已经太大以至于无法在同一时间内存储于内存中。而在我们所写的程序中，函数&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;maptree static . prune 5 . gametree&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
只是构造出了树中maximise所需的部分。由于每一部分都可以在被maximise处理完之后丢弃（被垃圾收集器回收），故完整的树从来没有存储于内 存 中。只有树的一小部分在某一段时间内被储存着。因此这个惰性程序很有效率。这一效率取决于maximise（组合链上的最后一个函数）与gametree （第一个函数）的相互作用，因此在没有惰性求值的情况下，要完成任务，只能将组合链上的所有函数整合成一个大函数。这是对模块化的强烈破坏，但也是通常的 做法。通过单独修补每个部件，我们就可以优化估价算法——这相对简单。而一个传统型程序员必须把整个程序作为一个单元来修改，这就困难多了。&lt;br /&gt;
&lt;br /&gt;
到目前为止，我们只是描述了简单的对最大最小值的处理（minimaxing）。但alpha-beta算法的核心是“计算maximise与minimise的值时常常不需要考虑整棵树”这一观察结果。考虑树：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;max
       / \
      /   \
     /     \
    /       \
  min       min
  / \       / \
 /   \     /   \
1     2   0     ?&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
相当奇怪地，为了估价这棵树，并不需要知道问号处的值。左子树的最小值是1，但右子树的最小值显然是一个小于或等于0的值。因此这两个最小值的最大值必然是1。这一观察结果可以被泛化并内建到maximise和minimise之中。&lt;br /&gt;
&lt;br /&gt;
第一步是将maximise拆分成max对一个数字列表的作用。也就是，将maximise分解为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;maximise = max . maximise'&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
（minimise可以用类似的方法分解。由于maximise和minimise是完全对称的，故我们将只讨论maximise，而假定 minimise也照此处理。）一旦这样分解之后，maximise可以使用minimise'来发现minimise将对哪些数字求最小值，并且不再使 用minimise本身。而后便可 以在不查看某些数字的情况下便将它们丢弃。由于惰性求值的存在，如果maxmise并不会查看所有的数字列表，那么一部分列表将不会被计算，这是对计算机 时间的潜在节约。&lt;br /&gt;
&lt;br /&gt;
将max从maximise中“约分出来”是很简单的，得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;maximise' (node n nil) = cons n nil
maximise' (node n l) = map minimise l
                     = map (min . minimise') l
                     = map min (map minimise' l)
                     = mapmin (map minimise' l)
其中 mapmin = map min&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
由于minimise' 返回一个数字列表，而这个列表的最小值是minimise的结果，故(map minimise' l)返回一个数字列表的列表。Maximise'应该返回这些列表中每个列表的最小值组成的列表，但只有这个列表中的最大值才有用。我们应该定义一个 mapmin的新版本以忽略那些最小值不重要的列表。&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;mapmin (cons nums rest) =
               = cons (min nums) (omit (min nums) rest)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
函数omit传递一个“潜在的最大值”——当前所发现的最小值中最大的一个——并忽略任何比该值小的最小值。&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;omit pot nil = nil
   omit pot (cons nums rest) =
              = omit pot rest,                          当 minleq nums pot 
              = cons (min nums) (omit (min nums) rest), 否则&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
minleq 以一个数字列表和一个潜在最大值为参数，如果列表的最小值小于或等于潜在最大值就返回真。要完成这一工作，它并不需要扫描整个列表！如果列表中有任意一个 元素小于或等于潜在最大值，那么列表的最小值肯定也是如此。该特别元素之后的所有元素都是无关紧要的——它们就像是上面例子中的问号一样。因此 minleq可以被定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;minleq nil pot = false
  minleq (cons num rest) port = true,            当 num&amp;lt;=pot
                              = minleq rest pot, 否则&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
如是定义了maximise'和minimise'之后，要写出一个新的估价函数就很简单了：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;evaluate = max . maximise' . maptree static . prune 8 . gametree&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
由于惰性求值的存在，使得maximise'只查看树的更小部分，这意味着整个程序会更加高效，正如prune只查看无穷树的一部分使得程序可以终止一样。对maxmise'的优化，尽管相当简单，却能对运算的速度产生戏剧性的效果。因此也使得估价函数可以看得更远。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
对估价函数还可以进行其它优化。例如，刚刚描述的alpha-beta算法只有在最佳行动被最先考虑时才能够工作得最好，因为如果有一方发现了一着 妙棋，那就没必要再考虑较差的行动了，除非他证明对手至少能有一种很好的回应方式。因此可能会希望对每一个结点的子树进行排序，当计算机行动时将最高值放 在第一，而人行动时则相反。这可以使用函数：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;highfirst (node n sub) = node n (sort higher (map lowfirst sub))
lowfirst (node n sub) = node n (sort (not.higher) (map highfirst sub))
higher (node n1 sub1)(node n2 sub2) = n1&amp;gt;n2&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
此处sort是多用途排序函数。现在估价函数定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;evaluate = max . maximise' . highfirst . maptree static . prune 8 . gametree&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
也可能认为，为了限制搜索，只要考虑计算机或者对手的前三个最佳行动也已经足够了。要编写这样的程序，只需要把highfirst换成(taketree 3 . highfirst)，其中：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;taketree n = redtree (nodett n) cons nil
  nodett n label sub = node label (take n sub)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
taketree 将树上所有的结点替换为最多有n个子结点的结点，它使用了函数(take n)，而该函数返回列表的前n个元素（如果列表比n短，那么返回的元素就少一些）。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
另一种优化是对剪枝的改良。上述程序甚至在局势非常机动的情形下也会向前搜索固定的深度——有时可以决定不再搜索，例如在国际象棋中皇后受到威胁的时候。 通常可以定义某些“机动”的形势，并在遇到这样的结点之一时，不再继续搜索而停止。假定有函数“dyramic”用以确定这样的形势，那么只需要为 prune追加一个定义等式：&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
prune 0 (node pos sub) = node pos (map (prune 0) sub), if dynamic pos&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在像这个程序一样模块化的程序里，作出这样的改动是很简单的。如前所述，这个程序的效率，关键是由链中的最后一个函数maximise与第一个函数 gametree的相互作用决定的，因此若没有惰性求值，就只能写成一个单一的程序。这样的程序难于编写，难于修改，而且，非常难于理解。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

6 结论&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在本论文中，我们指出，模块化是成功的程序设计的关键。以提高生产力为目标的程序语言，必须良好地支持模块化程序设计。但是，新的作用域规则和分块编译的 技 巧是不够的——“模块化”不仅仅意味着“模块”。我们分解程序的能力直接取决于将解决方案粘在一起的能力。为了协助模块化程序设计，程序语言必须提供优良 的黏合剂。函数式程序语言提供了两种新的黏合剂——高阶函数与惰性求值。利用这些黏合剂可以将程序用新的、令人激动的方式模块化，对此我们举出了很多实 例。越小、越通用的模块越可能被广泛地重用，使后续的程序设计工作变得简单。这解释了为什么函数式程序与传统型程序比较，要小得多，也容易编写得多。它也 为函数式程序员提供了一个追求目标。如果程序的任何部分是杂乱或者复杂的，那么程序员就应当尝试将其模块化并泛化其部件。他应当期望把高阶函数和惰性求值 用作他做此事的工具。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
当然，我们并不是指出高阶函数与惰性求值的力与美的第一人。例如，Turner展示了这两者如何在一个生成化学结构 的程序里大显身手［Tur81］。Abelson和Sussman强调“流”（惰性列表）是构架程序的强大工具［AS86］。Henderson使用了流 来构架函数式操作系统［P.H82］。本论文的主要贡献是，断言了模块化自身，便是函数式语言强大威力的关键。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这与当前有关惰性求值的论战也有关联。有些人认为函数式语言应当是惰性的，而其他人认为不是这样。有些人走折衷路线，只提供惰性列表以及用于构造它 们的特殊语法（例如，在Scheme中［AS86］）。本论文提供了更进一步的证据，证明惰性求值非常重要以至于不能被降为二等公民。这也许是函数式程序 员所拥有的最强大的黏合剂。人们不应当阻碍对这样一个极为重要的工具的使用。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

致谢&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在牛津程序设计研究组与Phil Wadler和Richard Bird的多次交谈对本论文的写作帮助甚大。约特堡查麦兹大学的Magnus Bondesson指出了一个数值算法的早期版本中的严重错误，同时也协助了很多其他算法的开发。本论文在英国科学与工程研究评议会提供的研究基金赞助下 发表。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

参考文献&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
[AS86] H. Abelson and G.J. Sussman. Structure and Interpretation of Computer Programs. MIT Press, Boston, 1986.&lt;br /&gt;
[Hug89] J. Hughes. Why Functional Programming Matters. Computer Journal, 32(2), 1989.&lt;br /&gt;
[Hug90] John Hughes. Why Functional Programming Matters. In D. Turner, editor, Research Topics in Functional Programming. Addison Wesley,&lt;br /&gt;
1990.&lt;br /&gt;
[MTH90] R. Milner, M. Tofte, and R. Harper. The Definition of Standard ML. MIT Press, 1990.&lt;br /&gt;
[oD80] United States Department of Defense. The Programming Language Ada Reference Manual. Springer-Verlag, 1980.&lt;br /&gt;
[P.H82] P.Henderson. Purely Functional Operating Systems. 1982.&lt;br /&gt;
[Tur81] D. A. Turner. The Semantic Elegance of Applicative Languages. In Proceedings 1981 Conference on Functional Languages and Computer&lt;br /&gt;
Architecture, Wentworth-by-the-Sea, Portsmouth, New Hampshire, 1981.&lt;br /&gt;
[Tur85] D. A. Turner. Miranda: A non-strict language with polymorphic types. In Proceedings 1985 Conference on Functional Programming&lt;br /&gt;
Languages and Computer Architecture, pages 1–16, Nancy, France, 1985.&lt;br /&gt;
[Wir82] N. Wirth. Programming in Modula-II. Springer-Verlag, 1982.&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-5449619315224899675?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/R2VmE6G37Mq-jaMCT2Sdpbxrk4o/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/R2VmE6G37Mq-jaMCT2Sdpbxrk4o/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/R2VmE6G37Mq-jaMCT2Sdpbxrk4o/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/R2VmE6G37Mq-jaMCT2Sdpbxrk4o/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/ATGctGvXOPs&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>为什么函数式编程至关重要？（一）</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-12-02T01:01:00Z</updated>
   <id>http://aeternam.github.com./为什么函数式编程至关重要？（一）</id>
   <content type="html">&lt;ul style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;&lt;ul style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;
&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;作者：John Hughes&lt;/li&gt;
&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;翻译：&lt;a href=&quot;http://blog.csdn.net/ddwn/&quot; style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #eb374b; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none; vertical-align: baseline;&quot;&gt;CloudiDust&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;修订：ShiningRay&lt;/li&gt;
&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;原文地址：&lt;a href=&quot;http://www.md.chalmers.se/%7Erjmh/Papers/whyfp.html&quot; style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #eb374b; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none; vertical-align: baseline;&quot;&gt;http://www.md.chalmers.se/~rjmh/Papers/whyfp.html&lt;/a&gt;&lt;/li&gt;
本作品采用&lt;/ul&gt;
&lt;/ul&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #f2f2f2; color: #333333; display: inline ! important; float: none; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;知识共享署名-非商业性使用-相同方式共享 2.5 中国大陆许可协议&lt;/span&gt;&lt;br /&gt;
&lt;ul style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;进行许可。&lt;/ul&gt;
&lt;blockquote style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; quotes: none; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
Why Functional Programming Matters&lt;br /&gt;
John Hughes,&lt;br /&gt;
Institutionen f?r Datavetenskap,&lt;br /&gt;
Chalmers Tekniska H?gskola,&lt;br /&gt;
41296 G&amp;amp;oumlteborg, SWEDEN.&lt;br /&gt;
rjmh@cs.chalmers.se&lt;/blockquote&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 1em; margin-left: 1em; margin-right: 1em; margin-top: 1em; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 1em; padding-left: 1em; padding-right: 1em; padding-top: 1em; text-align: center; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
此论文作于1984年，作为查麦兹大学的备忘录流传了多年，经过小幅度修订的版本出现于1989年与1990年，即［Hug89］与［Hug90］。此版本基于原查麦兹大学备忘录的&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;nroff&lt;/code&gt;源码，为LaTeX做了改动,使其更接近于印刷版本，并纠正了少许错误。请容忍这种有点过时的排版吧，另外文中的例子也不是用Haskell写的！&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

摘要&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
随着软件变得越来越复杂，良好的软件结构也越来越重要。结构良好的软件易于编写，易于调试，同时提供可复用模块以降低未来开发的成本。常见的语言在 对问题进行模块化方面具有理念上的局限性，而函数式语言超越了这些局限。在本文中我们将特别展示函数式语言的两大特性——高阶函数与惰性求值，它们能够极 大地促进模块化。作为例证，我们运用列表和树编写了一些数值算法，并实现了alpha-beta启发式搜索（一个人工智能算法，用于游戏系统中）。由于模 块化是成功程序设计的关键，所以函数式语言对现实世界而言便极其重要了。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

1 引言&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
本论文试图向“现实世界”证明函数式程序设计是极其重要的，同时本文也试图明确指出函数式编程的长处，以帮助使用函数式语言的程序员们将这些长处发挥到极致。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
函数式语言之所以如此称呼，是因为程序完全是由函数组成的。主程序本身也是一个函数，以程序的输入为参数，并给出其输出作为结果。主函数一般是根据 其他函数进行定义的，而这些函数又同样是根据更多的其他函数来定义，直到最低层的函数是语言的原生函数。这些函数与普通的数学函数很相像，因此在本文中将 以普通等式来定义它们。本文的标记法遵循Turner的程序语言Miranda(TM)中的表示方法，不过对于之前没有函数式语言相关知识的读者，也可以 看得懂。（Miranda是 Research Software Ltd.的商标）&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
函数式程序设计的特性与优点差不多都总结为：函数式程序不包含任何赋值语句，因此变量一旦被赋予一个值，就不再改变。更一般地说，函数式程序不包含 任何副作用：除非对函数进行求值，它不会有任何效果。这一特性消灭了错误的一个主要来源，同时也使执行顺序不再重要——因为没有副作用能够改变表达式的 值，因此可以在任何时刻对它求值。这一特性将程序员从规定控制流的重担之下拯救出来。由于表达式可以在任何时刻被求值，程序员便可以随心所欲地使用自己要 的值来代替变量，反之亦然——也就是说，程序是“引用透明”的。这一自由使得函数式程序与它们传统的对应物相比，更容易数学化地控制。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这样一些“优点”都很不错，但如果说外行人不把它当回事，也不会令人惊讶。它列出了很多关于函数式程序设计“没有”什么（它没有赋值，没有副作用， 没有控制流）但却没多说它“有”什么。函数式程序员听起来很像是中世纪的僧侣似的，他们禁绝了尘世中的种种乐趣并且期望这能使自己变得高洁。对于那些更关 心物质利益的人而言，这些“优点”并没有多大的说服力。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
函数式程序员们会争辩说，函数式程序设计确实有巨大的物质利益——一个函数式程序员拥有比其他使用常见语言的同行高得多的生产力，因为函数式程序短 得多。但这有什么道理吗？在这些“优点”的基础之上，唯一的很靠不住的借口就是，一般的程序中有90％是赋值语句，而在函数式程序中这些全都可以省略！这 真是太荒唐了，如果省略赋值语句可以带来如此巨大的好处，那么FORTRAN程序员们二十年前早该这样干了。通过省略特性来使语言更加强大在逻辑上是不可 能的，不论这些特性是多么糟糕。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
甚至函数式程序员都应该对这些所谓的“优点”表示不满意，因为它们对于发掘函数式语言的威力毫无帮助。不可能写出一个刻意缺少赋值语句或者刻意引用透明的程序。这里没有衡量程序质量的标准，因此没有作为目标的理想典范。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
很明显，对函数式程序设计的特性的描述是不完备的。我们必须找出一些东西来填补——它们不但要解释函数式程序设计的威力，更要给函数式程序员们一个明确的追求目标。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

2 与结构化程序设计进行类比&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
指出函数式与结构化程序设计之间的相似性是很有帮助的。过去，结构化程序设计的特性与优点大致被总结为这样：结构化程序不包含&lt;b style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-weight: bold; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;goto&lt;/code&gt;&lt;/b&gt;语 句；结构化程序中的语句块没有多个入口与出口；结构化程序与非结构化的对应物相比，更容易数学化地控制。这些结构化程序设计的“优点”与我们之前所谈到的 函数式程序设计的 “优点”在本质上很相似。这些叙述本质上都是否定式的，从而导致了诸如“goto是否必要”之类一大堆没有结果的争论。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
事后诸葛亮式地说，很明显，结构化程序设计的这些特性，尽管很有用，但没有触及问题的核心。结构化程序与非结构化程序之间最重要的区别就是，结构化 程序是用模块化的方法设计的。模块化设计带来了生产力的巨大提升：首先，小模块可以很快很容易地编写；其次，通用模块可以被重用，使后续的程序可以更快地 开发；再次，程序的模块可以独立进行测试，有助于减少调试的时间。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
“不使用goto”等等这一类特性，和这没有什么关系。这些特性促进了“程序设计的小改良”，然而模块化设计却促进了“程序设计的大进化”。因此，程序员在FORTRAN或汇编语言中都可以享受结构化程序设计带来的好处，哪怕那需要一点额外的工作。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
模块化设计是成功的程序设计的关键，这一观点现在已经被普遍地接受了，而诸如Modula-II[Wir82]，Ada[oD80]以及 Standard ML[MTH90]之类的程序语言都内置了语言特性以促进模块化。然而，有一点非常重要，却常常被忽略。当编写一个模块化程序以解决问题的时候，程序员首 先把这个问题分解为子问题，而后解决这些子问题并把解决方案合并。程序员能够以什么方式分解问题，直接取决于他能以什么方式把解决方案粘起来。因此，为了 能在观念上提升程序员将问题模块化的能力，必须在程序语言提供中提供各种新的黏合剂。复杂的作用域规则与对分块编译的支持只对文本层面的细节有帮助，它们 没有提供能表达新观念的工具以分解问题。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
通过与木匠行业的类比可以认识到黏合剂的重要性。先制作椅子的各部分——坐垫，椅子腿，靠背，等等——而后用正确的方法钉起来，那么制作一把椅子是 很容易的。但这取决于将木板与插接口结合起来的能力。如果缺乏这种能力，那么制作椅子的唯一方式，就是 将它从一大块木头里整个地切割出来，这是一项艰巨得多的任务。这个例子同时表明了模块化的非凡威力与拥有合适的黏合剂的重要性。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
现在让我们回到函数式程序设计上来。在这篇论文余下的部分里，我们将指出，函数式语言提供了两种新的、非常重要的黏合剂。我们将给出许多可以使用新 方法模块化的示 例程序，它们因此变得很简洁。这就是函数式程序设计威力的关键——它允许了大幅改进的模块化设计。这也正是函数式程序员必须追求的目标——更小、更简洁、 更通用的模块，用我们将要描述的新黏合剂黏合起来。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

3 把函数粘起来&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
两种黏合剂中的第一种，使简单的函数可以聚合起来形成复杂的函数。以一个简单的处理问题来说明：将列表中的元素累加起来。我们用下面的语句定义列表：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;listof X :: = nil | cons X (listof X)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这说明，一个元素类型为X的列表（不论X是什么）可以是&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;nil&lt;/code&gt;，代表一个没有元素的空列表，也可以是一个X与另一个由X组成的列表的&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;cons&lt;/code&gt;。一个cons就代表一个列表，其首元素为X，而第二个以及后续元素即是另一个X的列表的元素。此处的X可以代表任何类型——例如，如果X是一个“Integer”（整数类型），那么这个定义就是说，一个整数列表，或者是空的，或者是一个整数与另一个整数列表的&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;cons&lt;/code&gt;。依照通常的实践，我们写列表时，仅仅将其元素包含在方括号里，而不是将cons和nil显式地写出来。这是为了标记方便的缩写。例如：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;[]        表示    nil
[1]       表示    cons 1 nil
[1 2 3]   表示    cons 1 ( cons 2 ( cons 3 nil ))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
列表中的元素可以通过一个递归函数sum进行累加。sum必须针对两类参数进行定义：一种是空列表（nil），另一种是cons。没有数字时，和是0，因此我们定义：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;sum nil = 0&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
又因为cons的累加和可以通过将列表的第一个元素加到其余元素的累加和上的方式进行计算，所以可以定义：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;sum (cons num list) = num + sum list&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
研究这个定义可以发现，只有下面用方框标出的部分是特定于计算总和的：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;+---+
sum nil = | 0 |
          +---+
                          +---+
sum (cons num list) = num | + | sum list
                          +---+&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这说明求和的计算可以进行模块分割，通过一个通用的递归模式和上面框出的部分进行组合。这个递归模式习惯上被称为“归纳”（reduce），因此求和可以表达为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;sum = reduce add 0&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
方便起见，reduce传递了一个二元函数add而不是一个运算符。add的定义如下：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;add x y = x + y&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
只要将sum的定义参数化，我们便可以得到reduce的定义，即：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;(reduce f x) nil = x
(reduce f x)(cons a l) = f a ((reduce f x) l)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这里我们写出了&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;(reduce f x)&lt;/code&gt;两边的括号以强调它代替了sum。习惯上括号是省略的，因此&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;((reduce f x) l)&lt;/code&gt;写作&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;(reduce f x l)&lt;/code&gt;。一个三元函数如&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;reduce&lt;/code&gt;，当只提供两个参数时，将成为关于那个余下参数的一元函数。一般地，对一个&lt;i style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: italic; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;n&lt;/i&gt;元函数，给出了&lt;i style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: italic; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;m(&amp;lt; n)&lt;/i&gt;个参数后，该函数便成为了关于余下的&lt;i style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: italic; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;n-m&lt;/i&gt;个参数的函数。我们在下文中将遵守这一约定。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
用这种方式将sum模块化之后，我们就可以通过对这部分的重用来获得好处了。最有趣的部分就是reduce了，无需要进一步编程，就可以用于编写一个函数来计算列表中元素的累乘积：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;product = reduce multiply 1&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
它也可以用来测试一个布尔值的列表中是否至少有一个元素为真：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;anytrue = reduce or false&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
或者它们是否都为真：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;alltrue = reduce and true&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
理解&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;(reduce f a)&lt;/code&gt;的一种方式是，将其看作一个将列表中的所有cons替换为f，将所有nil替换为a的函数。以列表&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;[1,2,3]&lt;/code&gt;为例，既然它表示：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;cons 1 (cons 2 (cons 3 nil))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
那么(reduce add 0)将其转换为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;add 1 (add 2 (add 3 0)) = 6&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
而(reduce multiply 1)将其转换为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;multiply 1 (mulitiply 2 (mulitiply 3 1)) = 6&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
于是，很明显地，&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;(reduce cons nil)&lt;/code&gt;将复制列表本身。既然将一个列表追加到另一个列表上的方式是将前一个列表的元素cons到后一个列表前部，我们便得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;append a b = reduce cons b a&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
例如：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;append [1,2] [3,4] = reduce cons [3,4] [1,2]
                   = (reduce cons [3,4]) (cons 1 ( cons 2 nil ))
                   = cons 1 ( cons 2 [3,4]))
                     （将cons替换为cons，将nil替换为[3,4]）
                   = [1,2,3,4]&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
一个用于将列表中全部元素翻倍的函数可以写作：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;doubleall = reduce doubleandcons nil
where doubleandcons num list = cons (2*num) list&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
doubleandcons可以进一步模块化，首先分解为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;doubleandcons = fandcons double
where double n = 2*n
      fandcons f el list = cons (f el) list&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
继续分解：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;fandcons f = cons . f&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
其中“.”（函数复合，一个标准运算符）的定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;(f . g) h = f(g h)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
通过代入一些参数，我们可以看出fandcons的定义是正确的：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;fandcons f el = (cons . f) el 
                 = cons (f el)
所以 fandcons f el list = cons (f el) list&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
最终得到的版本是：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;doubleall = reduce (cons . double) nil&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
继续模块化，我们得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;doubleall = map double
map f = reduce (cons . f) nil&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
其中map使任意的函数f作用于列表的全部元素上。映射map是另一个很有用的函数。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
我们甚至可以写出一个累加矩阵中的所有元素的函数，该矩阵用列表的列表表示。这个函数是：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;summatrix = sum . map sum&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;map sum&lt;/code&gt;使用函数sum分别计算所有行的元素之和，而后最左边的sum将每一行的元素之和累加起来，从而得到整个矩阵的累加和。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这些例子应该已经足以使读者确信，一点模块化的努力可以产生很大的效果。通过将一个简单的函数（sum）模块化为一个“高阶函数”与一些简单参数的 组合，我们得到了一个可以用于编写与列表有关的许多函数的部件（reduce），而又不再需要更多的编程努力。不止是对有关列表的函数可以这么干，举另外 一个例子，考虑数据类型“有序标记树”，其定义是：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;treeof X ::= node X (listof (treeof X))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这个定义表明，一棵X的树，由一个标记类型为X的结点（node），以及一个子树列表组成，而这些子树也是X的树。例如，树：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;1 o
       / \
      /   \
     /     \
  2 o       o 3
            |
            |
            |
            o 4&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
可以被表示成：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;node 1
    (cons (node 2 nil)
          (cons (node 3
                (cons (node 4 nil) nil))
                 nil))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
我们不再给出一个函数例子并将它抽象为高阶函数，取而代之的是，直接给出一个类似于reduce的函数redtree。回忆一下，reduce有两个参数， 一个用于取代cons，另一个用于取代nil。既然树由node，cons和nil组成，那么redtree必须有三个参数——用于分别取代上述三者。由 于树和列表不是同一种类型，我们得定义两个函数分别处理它们。因此我们定义：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;redtree f g a (node label subtrees) =
        f label (redtree' f g a subtrees )
redtree' f g a (cons subtree rest) =
             g (redtree f g a subtree) (redtree' f g a rest)
redtree' f g a nil = a&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
很多有趣的函数都可以通过把redtree和其他函数粘起来的方法来定义。例如，要把一棵数字树上的所有标记累加起来，可以使用：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;sumtree = redtree add add 0&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
以我们刚才表述的那棵树为例，sumtree展开成：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;add 1
    (add (add 2 0) 
         (add (add 3 
                   (add (add 4 0) 0)) 
              0))
= 10&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
要生成一个包含树中全部标记的列表，可以用：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;labels = redtree cons append nil&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
仍然是那个例子，得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;cons 1 
           (append (cons 2 nil) 
                   (append (cons 3
                                 (append (cons 4 nil) nil))
                           nil)) 
   = [1,2,3,4]&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
最后，可以定义一个类似于map的函数，此函数使函数f作用于树中的全部标记上：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;maptree f = redtree (node . f) cons nil&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
以上这些操作之所以可行，是因为函数式语言允许将传统型语言中不可分解的函数表达为一些部件的聚合——也就是一个泛化的高阶函数与一些特化函数的聚 合。这样的高阶函数一旦定义，便使得很多操作都可以很容易地编写出来。不论何时，只要一个新的数据类型被定义，就应当同时定义用于处理这种数据的高阶函 数。这样就简化了对数据类型的处理，同时也将与它的表示细节相关的知识局部化了。与（函数式语言）最相像的传统程序语言是 可扩展语言——只要有需求，这种程序语言就好像随时都可以扩展出新的控制结构一样。&lt;/div&gt;
&lt;h1 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 16px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

4 把程序粘起来&lt;/h1&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
函数式语言提供的另一种黏合剂使得所有程序都可以粘在一起。回忆一下，一个完整的函数式程序只不过是一个从输入映射到输出的函数。如果f和g是这样的程序，那么对程序&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;(g.f)&lt;/code&gt;当提供了输入参数input之后，得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;g (f input)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
程序f计算自身的输出，此输出被用作程序g的输入。传统上，这是通过将f的输出储存在临时文件中实现的。这种方法的毛病是，临时文件可能会占用太大 的空间， 以至于将程序黏合起来变得很不现实。函数式语言提供了一种解决方案。程序f和g严格地同步运行，只有当g试图读取输入时，f才启动，并且只运行足够的时 间，恰好可以提供g需要读取的输出数据。而后f将被挂起，g将继续执行，直到它试图读取另一个输入。一个额外的好处是，如果g没有读取完f的全部输出就终 止了，那么f也将被终止。f甚至可以是一个不会（自行）终止的程序，它可以产生无穷多的输出（而不会出现问题），因为当g运行结束时，f也将被强行终止。 这就使得终止条件可以与循环体&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
分离——一种强大的模块化形式。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这种求值方式使得f尽可能地少运行，因此被称为“惰性求值”。它使得将程序模块化为一个产生大量可能解的生成器与一个选取恰当解的选择器的方案变得 可行。有些其他的系统也允许程序以这种方式运行，但只有函数式语言对每一个函数调用都一律使用惰性求值，使得程序的每个部分都可以 用这种方式模块化。惰性求值也许是函数式程序员的拿手利器中威力最大的模块化工具。&lt;/div&gt;
&lt;h2 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

4.1 牛顿－拉夫森求根法&lt;/h2&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
我们将编写一些数值算法以展现惰性求值的威力。首先，考虑用于求解平方根的牛顿－拉夫森算法。该算法从一个初始的近似值a0开始计算数N的平方根，为了求得更好的解，它使用下述规则：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;a(n+1) = (a(n) + N/a(n)) / 2&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
如果近似值序列趋近于某一个极限&lt;i style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: italic; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;a&lt;/i&gt;，那么&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;a = (a + N/a) / 2
故    2a = a + N/a
      a = N/a
      a*a = N
      a = squareroot(N)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
事实上，这个近似值序列确实迅速地趋近于一个极限。平方根算法取一个允许误差（eps）为参数，当两个相邻的近似值之差（的绝对值）小于eps时，算法便终止了。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这个算法通常被编写为类似下面这样：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;C   N IS CALLED ZN HERE SO THAT IT HAS THE RIGHT TYPE
          X = A0
          Y = A0 + 2.*EPS
  C   THE VALUE OF Y DOES NOT MATTER SO LONG AS ABS(X-Y).GT.EPS
  100   IF (ABS(X-Y).LE.EPS) GOTO 200
            Y = X
            X = (X + ZN/X) / 2
  200   CONTINUE
  C   THE SQUARE ROOT OF ZN IS NOW IN X&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
［译注：这是一段FORTRAN的程序，C代表注释行，保留不翻译。.LE.是“Less than or Equal to”（小于或等于）的缩写，.GT.是Greater than“大于”的意思。]&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在传统型语言中，这个程序是不可分解的。我们将利用惰性求值将其化为更加模块化的形式，而后演示所生成部件的一些其他用途。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
由于牛顿－拉夫森算法计算的是一个近似值的序列，故将它写作一个使用近似值列表的程序就再自然不过了。每个近似值都可以通过下面的函数从前一个值计算得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;next N x = (x + N/x) / 2&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
因此(next N)是从一个近似值映射到下一个值的函数。调用函数f，得到近似值序列：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;[a0, f a0, f(f a0), f(f(f a0)), ...]&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
我们可以定义一个函数来计算：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;repeat f a = cons a (repeat f (f a))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
因此近似值序列可以这样计算：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;repeat (next N) a0&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
repeat是一个具有“无穷”输出的函数的例子——但这没关系，因为超出程序其余部分需求的近似值并不会被计算。无穷性只是潜在的：它只说明，只要有需求，就可以计算出任意数量的近似值，repeat本身不会强加任何限制。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
求根函数的剩余部分是函数&lt;i style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: italic; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;within&lt;/i&gt;，它取一个允许误差与一个近似值列表作为参数，并在列表中查找差值不超过允许误差的一对相邻的近似值。这个函数可以定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;within eps (cons a (cons b rest)) =
              = b,                        当 abs(a-b) &amp;lt;= eps
              = within eps (cons b rest), 否则&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
将这两个部件结合起来，&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;sqrt a0 eps N = within eps (repeat (next N) a0)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
现在我们得到了求根函数的两大部件，便可以尝试用不同的方式组合它们。将要进行的修改之一，是将判断条件改为“相邻近似值的比趋近1”而不是“差趋 近0”。 这对于非常小的数字而言更加合适（当初始的相邻近似值之间的差值很小时），对非常大的数字也是如此（当舍尾产生的误差比允许误差大很多时）。我们只需要定 义一个函数来替换within：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;relative eps (cons a (cons b rest)) =
              = b,                          当 abs(a-b) &amp;lt;= eps*abs b
              = relative eps (cons b rest), 否则&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
而并不需要改写生成近似值的部件。&lt;/div&gt;
&lt;h2 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

4.2 数值微分&lt;/h2&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
我们已经重用了平方根近似值序列，当然，对函数within和relative的重用也是可能的，它们能够与任何一个生成近似值序列的数值算法配合。我们将这样来编写数值微分算法。&lt;br /&gt;
&lt;br /&gt;
函数在某一点的微分，便是其图象在该点的斜率。通过分别计算函数在该点与一个临近点处的取值，而后计算两点连线斜率的方法，可以很容易地估计出微分的值。这基于一个假定：如果这两点靠得足够近，那么函数图象在两点之间不会弯曲得很厉害。于是有下述定义：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;easydiff f x h = (f(x+h)-f x) / h&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
为了得到良好的近似值，h应该很小。不幸的是，如果h太小，那么f(x+h)与f(x)会相当接近，因此在相减过程中产生的舍尾误差可能会掩盖了计 算结果。 如何为h选取恰当的值呢？解决这个矛盾一种方案是从一个合理的较大取值开始，不断减小h的值，并求出一个（微分的）近似值序列。这个序列将趋近于该点的导 数，但最终会由于舍尾误差的存在而不可救药地变得不精确。如果我们用(within eps)来选取第一个足够精确的近似值，那么舍尾误差影响结果的风险将会大大降低。我们需要一个函数来计算这个序列：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;differentiate h0 f x = map (easydiff f x) (repeat halve h0)
  halve x = x/2&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
此处h0是h的初值，而后继取值是通过不断减半得到的。通过这个函数，任意点处的导数可以这样计算：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;within eps (differentiate h0 f x)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
但是，甚至这个方案也不是那么令人满意的，因为近似值序列收敛得相当慢。解决这个问题需要一点数学知识，序列中的元素可以记为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;（微分的）精确值 ＋ 一个关于h的误差项&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
理论表明，该误差项与h的某一次幂大致成正比，因此当h减小时，误差也会减小。设精确值为A，而误差项为B*h**n [me：**是求幂运算符］。由于计算每个近似值时所用的h取值是下一个的两倍，故任意两个连续的近似值可以表示成：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;a(i)   = A + B*(2**n)*(h**n)
 a(i+1) = A + B*(h**n)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
现在就可以消去误差项了，我们得到：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;a(i+1)*(2**n) - a(i)
   A=----------------------
           2**n - 1&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
当然，误差项只不过“大致”与h的某一次幂（成正比），因此这个结论也是近似的。但这是一个好得多的近似。这一改进可以通过下述函数作用于所有相邻的近似值对之上：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;elimerror n (cons a (cons b rest)) =
              = cons ((b*(2**n)-a)/(2**n-1)) (elimerror n (cons b rest))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
从一个近似值序列中消除误差项的操作产生了另一个收敛速度快得多的序列。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
使用elimerror之前还有一个问题需要解决——我们必须知道n的正确值。通常这个值很难预测，但却很容易衡量。不难验证，下述函数能够正确地消除误差项，但在此我们并不给出证明。&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;order (cons a (cons b (cons c rest))) =
              = round(log2( (a-c)/(b-c) - 1 ))
   round x = 最接近x的整数
   log2 x  = x以2为底的对数&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
现在，一个通用的近似值序列优化函数可以定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;improve s = elimerror (order s) s&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
使用improve能够更加高效地计算函数f的导数，如下：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;within eps (improve (differentiate h0 f x))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
improve只对利用一个不断减半的参数h计算得到的近似值序列&lt;br /&gt;
适用。但是，如果improve作用于这样的序列，那么其结果也是一个这样的序列！这意味着一个近似值序列可以优化不止一次。每一次优化的过程中，都有一个不同的误差项被消除，因此优化产生的序列收敛得越来越快。因此，可以非常高效地计算导数：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;within eps (improve (improve (improve (differentiate h0 f x))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
从数值分析的角度讲，这似乎是一个“四阶方法”，可以迅速地给出准确的结果。甚至可以定义：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;super s = map second (repeat improve s)
second (cons a (cons b rest)) = b&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
super函数使用repeat improve来生成一个不断被优化的近似值的序列的序列。同时，super提取出每个近似值序列中的第二个元素，构造出一个新的序列（已经确认，第二元 素是最佳选择——它比首元更精确，而且不需要额外的计算）。这个算法的确非常复杂——更多的近似值被计算的同时，它使用了不断优化的数值方法。可以用下面 的程序非常非常高效地计算导数：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;within eps (super (differentiate h0 f x))&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这个案例可能就像是用高射炮打蚊子，但关键是，甚至一个像super一样复杂的函数，当被惰性求值的方法模块化时，也会变得很容易表达。&lt;/div&gt;
&lt;h2 style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;

4.3 数值积分&lt;/h2&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在这一部分我们将讨论的最后一个例子是数值积分。问题的描述很简单：给出一个返回实数并有一个实数参数的函数，以及两个端点a和b，估算两点之间f描述的曲线下方的面积。估算面积的最简单方法是假定f趋近于直线，此时面积就是：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;easyintegrate f a b = (f a + f b)*(b-a)/2&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
不幸的是，除非a与b足够接近，否则这个估算似乎非常不精确。更好的估算方法是，将a与b之间的区间分为两段，分别估算子区间上的面积，再将结果加 起来。我们可以使用前面的公式进行第一次近似来定义一个不断趋近于准确值的积分近似值序列，后面的项是将前面项的各个部分再进行二分，并相加，来获得对不 断趋近于积分的值。计算这个序列可以使用函数：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;intergrate f a b = cons (easyintergrate f a b)
                   (map addpair (zip (intergrate f a mid)
                       (intergrate f mid b)))
其中 mid = (a+b)/2&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
Zip是另一个标准的列表处理函数。它读取两个列表，并返回一个有序对的列表，每个有序对由两个输入列表中对应的元素组成。所以第一对由列表一和列表二的首元组成，第二对由列表一和列表二的第二个元素组成，以此类推。Zip可以定义为：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;zip (cons a s) (cons b t) = cons (pair a b) (zip s t)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
在函数intergrate中，zip用于生成由两个子区间上相对应的积分近似值对组成的列表，而map addpair用于将有序对中的元素相加，从而生成一个原积分的近似值列表。&lt;/div&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
实际上，这个版本的intergrate函数相当低效，因为它持续不断地重复计算f的值。就像所写的一样，easyintergrate计算了f在a和b两处的值，而对intergrate的递归调用将重复计算它们。同样的，(f mid)也在递归调用中重复计算了。因此，最好使用下述从不重复计算f的版本：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;intergrate f a b = interg f a b (f a) (f b)
integ f a b fa fb = cons ((fa+fb)*(b-a)/2)
                         (map addpair (zip (interg f a m fa fm)
                                           (interg f m b fm fb)))
     其中 m = (a+b)/2
           fm = f m&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
integrate给出了一个不断趋近准确值的积分近似值列表，正如differentiate在上一小节中所做的一样。因此可以写出计算式以求出所需任意精度的积分值，如下：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;within eps (intergrate f a b)
relative eps (integrate f a b)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
这个积分算法与上一小节中的第一个微分算法有着同样的缺点——它收敛得相当慢。序列中的第一个近似值仅仅用了两个相距(a-b)的点来计算（通过 easyintergrate）。第二个近似值也（除了a、b之外）用到了中点，因此相邻两点之间的间距仅为(b-a)/2。第三个近似值在两个子区间上 作同样的处理，因此间距仅为(b-a)/4。很清楚，每个近似值对应的相邻两点之间的间距在计算下一个值时被减半了。将这一间距看作“h”，那么这个序列 就可以成为上一小节中定义的“improve”函数的优化对象了。因此我们可以写出（函数来计算）快速收敛的积分近似值序列，例如：&lt;/div&gt;
&lt;pre style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei' !important; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; widows: 2; word-spacing: 0px;&quot;&gt;super (intergrate sin 0 4)   
improve (intergrate f 0 1)
其中 f x = 1/(1+x*x)&lt;/pre&gt;
&lt;div style=&quot;-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-attachment: initial; background-clip: initial; background-color: #f2f2f2; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #333333; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; orphans: 2; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-align: -webkit-auto; text-indent: 0px; text-transform: none; vertical-align: baseline; white-space: normal; widows: 2; word-spacing: 0px;&quot;&gt;
（后一个序列是用于计算pi/4的“第八阶方法”。其中的第二个近似值只需要计算5次f的取值，但却具有5位准确数字。）&lt;br /&gt;
&lt;br /&gt;
在 本节中我们选取了一些数值算法并将它们函数化地编写出来，把惰性求值当做了黏合部件的黏合剂。由于惰性求值的存在，使得我们可以用很多新的方式来模块化这 些算法，从而产生用途广泛的函数，例如within，relative和improve。通过这些部件的不同组合，我们简单而明了地编写出了一些相当不错 的数值算法。&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-3228230041674047894?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/s5aV9WGk4D_iiEFZpPm1rcm9j-w/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/s5aV9WGk4D_iiEFZpPm1rcm9j-w/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/s5aV9WGk4D_iiEFZpPm1rcm9j-w/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/s5aV9WGk4D_iiEFZpPm1rcm9j-w/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/NfzYUs9_ipA&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>{转载}给力的运维shell命令</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-11-02T00:00:00+08:00</updated>
   <id>http://aeternam.github.com./{转载}给力的运维shell命令</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; font-family: arial,sans-serif; font-size: 13px;&quot;&gt;&lt;/span&gt;&lt;br /&gt;
1.显示消耗内存/CPU最多的10个进程&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;ps&lt;/span&gt; aux &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;sort&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-nk&lt;/span&gt; +&lt;span style=&quot;color: black;&quot;&gt;4&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;tail&lt;/span&gt;
&lt;span style=&quot;color: #c20cb9;&quot;&gt;ps&lt;/span&gt; aux &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;sort&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-nk&lt;/span&gt; +&lt;span style=&quot;color: black;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;tail&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
2.查看Apache的并发请求数及其TCP连接状态&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;netstat&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-n&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;awk&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;'/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
3.找出自己最常用的10条命令及使用次数（或求访问最多的ip数）&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;sed&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-e&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;'s/| /\n/g'&lt;/span&gt; ~&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;.bash_history &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;cut&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-d&lt;/span&gt;  &lt;span style=&quot;color: red;&quot;&gt;''&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-f&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;sort&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;uniq&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-c&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;sort&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-nr&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;head&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
4.日志中第10个字段表示连接时间，求平均连接时间&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;cat&lt;/span&gt; access_log &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;grep&lt;/span&gt; “connect cbp” &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;awk&lt;/span&gt; ‘BEGIN&lt;span style=&quot;color: #7a0874;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #007800;&quot;&gt;sum&lt;/span&gt;=&lt;span style=&quot;color: black;&quot;&gt;0&lt;/span&gt;;&lt;span style=&quot;color: #007800;&quot;&gt;count&lt;/span&gt;=&lt;span style=&quot;color: black;&quot;&gt;0&lt;/span&gt;;&lt;span style=&quot;color: #7a0874;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #7a0874;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;sum&lt;/span&gt;+=&lt;span style=&quot;color: #007800;&quot;&gt;$1&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;0&lt;/span&gt;;count++;&lt;span style=&quot;color: #7a0874;&quot;&gt;}&lt;/span&gt;END&lt;span style=&quot;color: #7a0874;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #7a0874;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #7a0874;&quot;&gt;(&lt;/span&gt;“&lt;span style=&quot;color: #007800;&quot;&gt;sum&lt;/span&gt;=&lt;span style=&quot;color: black;&quot;&gt;%&lt;/span&gt;d,&lt;span style=&quot;color: #007800;&quot;&gt;count&lt;/span&gt;=&lt;span style=&quot;color: black;&quot;&gt;%&lt;/span&gt;d,&lt;span style=&quot;color: #007800;&quot;&gt;avg&lt;/span&gt;=&lt;span style=&quot;color: black;&quot;&gt;%&lt;/span&gt;f\n”,&lt;span style=&quot;color: #c20cb9;&quot;&gt;sum&lt;/span&gt;,count,
sum&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;count&lt;span style=&quot;color: #7a0874;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #7a0874;&quot;&gt;}&lt;/span&gt;’&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
5.lsof命令&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;lsof abc.txt 显示开启文件abc.txt的进程
lsof &lt;span style=&quot;color: #660033;&quot;&gt;-i&lt;/span&gt; :&lt;span style=&quot;color: black;&quot;&gt;22&lt;/span&gt; 知道&lt;span style=&quot;color: black;&quot;&gt;22&lt;/span&gt;端口现在运行什么程序
lsof &lt;span style=&quot;color: #660033;&quot;&gt;-c&lt;/span&gt; abc 显示abc进程现在打开的文件
lsof &lt;span style=&quot;color: #660033;&quot;&gt;-p&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;12&lt;/span&gt;  看进程号为&lt;span style=&quot;color: black;&quot;&gt;12&lt;/span&gt;的进程打开了哪些文件&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
6.杀掉一个程序的所有进程&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;pkill &lt;span style=&quot;color: #660033;&quot;&gt;-9&lt;/span&gt; httpd
&lt;span style=&quot;color: #c20cb9;&quot;&gt;killall&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-9&lt;/span&gt; httpd&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
注意尽量不用-9，数据库服务器上更不能轻易用kill，否则造成重要数据丢失后果将不堪设想。&lt;br /&gt;
7.rsync命令（要求只同步某天的压缩文件，而且远程目录保持与本地目录一致）&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;usr&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;bin&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;rsync &lt;span style=&quot;color: #660033;&quot;&gt;-azvR&lt;/span&gt; –password-file=&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;etc&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;rsync.secrets &lt;span style=&quot;color: black;&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;find&lt;/span&gt; . &lt;span style=&quot;color: #660033;&quot;&gt;-name&lt;/span&gt; “&lt;span style=&quot;color: black;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #007800;&quot;&gt;$yesterday&lt;/span&gt;.gz”  &lt;span style=&quot;color: #660033;&quot;&gt;-type&lt;/span&gt; f &lt;span style=&quot;color: black;&quot;&gt;`&lt;/span&gt; storage&lt;span style=&quot;color: black;&quot;&gt;@&lt;/span&gt;192.168.2.23::logbackup&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;13.21&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
8.把目录下*.sh文件改名为*.SH&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;find&lt;/span&gt; .  &lt;span style=&quot;color: #660033;&quot;&gt;-name&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;&quot;*.sh&quot;&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;sed&lt;/span&gt;  &lt;span style=&quot;color: red;&quot;&gt;'s/\(.*\)\.sh/mv \0 \1.SH/'&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;sh&lt;/span&gt;
&lt;span style=&quot;color: #c20cb9;&quot;&gt;find&lt;/span&gt; .  &lt;span style=&quot;color: #660033;&quot;&gt;-name&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;&quot;*.sh&quot;&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9;&quot;&gt;sed&lt;/span&gt;  &lt;span style=&quot;color: red;&quot;&gt;'s/\(.*\)\.sh/mv &amp;amp; \1.SH/'&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;sh&lt;/span&gt;  （跟上面那个效果一样）&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
9.ssh执行远程的程序，并在本地显示&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;ssh&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-n&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-l&lt;/span&gt; zouyunhao 192.168.2.14 &lt;span style=&quot;color: red;&quot;&gt;&quot;ls -al /home/zouyunhao&quot;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
10. 直接用命令行修改密码&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: #7a0874;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;&quot;zouyunhaoPassword&quot;&lt;/span&gt; &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;passwd&lt;/span&gt; –stdin zouyunhao
&amp;nbsp;
&lt;span style=&quot;color: #c20cb9;&quot;&gt;ssh-keygen&lt;/span&gt;
ssh-copy-id &lt;span style=&quot;color: #660033;&quot;&gt;-i&lt;/span&gt; ~&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;.ssh&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;id_rsa.pub user&lt;span style=&quot;color: black;&quot;&gt;@&lt;/span&gt;remoteServer&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
12.以http方式共享当前文件夹的文件&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;$ python &lt;span style=&quot;color: #660033;&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer
在浏览器访问http:&lt;span style=&quot;color: black;&quot;&gt;//&lt;/span&gt;IP:&lt;span style=&quot;color: black;&quot;&gt;8000&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;即可下载当前目录的文件。&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
13.shell段注释&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;:&lt;span style=&quot;color: black;&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;'echo hello,world!'&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
14.查看服务器序列号&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;dmidecode &lt;span style=&quot;color: black;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #c20cb9;&quot;&gt;grep&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;&quot;Serial Number&quot;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
（查看机器其他硬件信息也可用这个命令）&lt;br /&gt;
15.查看网卡是否有网线物理连接&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;div style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;
&lt;pre style=&quot;font-family: monospace; font-size: 12px;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;sbin&lt;span style=&quot;color: black;&quot;&gt;/&lt;/span&gt;mii-tool&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-7922146732218212833?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Q-7osMU26bq__uKnMHc6_jOmZYc/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Q-7osMU26bq__uKnMHc6_jOmZYc/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Q-7osMU26bq__uKnMHc6_jOmZYc/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Q-7osMU26bq__uKnMHc6_jOmZYc/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/b4CUnEW2w7Y&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>上上个星期的团队分享-进程及信号</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-10-27T12:22:00Z</updated>
   <id>http://aeternam.github.com./上上个星期的团队分享-进程及信号</id>
   <content type="html">&lt;div id=&quot;__ss_9904973&quot; style=&quot;width: 425px;&quot;&gt;
&lt;strong style=&quot;display: block; margin: 12px 0 4px;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/smilejustforfan/process-signal&quot; title=&quot;Process Signal&quot;&gt;Process Signal&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;object height=&quot;355&quot; id=&quot;__sse9904973&quot; width=&quot;425&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=signal-111027071046-phpapp02&amp;stripped_title=process-signal&amp;userName=smilejustforfan&quot; /&gt;

&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;

&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;

&lt;embed name=&quot;__sse9904973&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=signal-111027071046-phpapp02&amp;stripped_title=process-signal&amp;userName=smilejustforfan&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div style=&quot;padding: 5px 0 12px;&quot;&gt;
View more &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;presentations&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/smilejustforfan&quot;&gt;smilejustforfan&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
其中用到的代码：&lt;br /&gt;
1.fork()初步了解
&lt;br /&gt;
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    fork&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    fork&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;hello!&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
2.fork()会返回两次，对父子进程各一次
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;sys/types.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdlib.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;

    pid_t pid&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;message&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; n&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    pid &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; fork&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;


    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;pid &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;fork failed.&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;exit&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;    
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;pid &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        message &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;This is the child.&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        n &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;else&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        message &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;This is the parent.&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        n &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;n &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;n&lt;span style=&quot;color: #d2cd86;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;id:&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%d&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;getpid&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;message&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        sleep&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;


    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
3.僵尸进程
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdlib.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;sys/types.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;ifdef&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt; UNIX&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;define&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt; PS &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;ps -a -O pid,ppid,s,tty,comm&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;else&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;define&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt; PS &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;ps axf&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;endif&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
  pid_t pid&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;pid &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; fork&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;fork error&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
      &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;exit&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;

  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;pid &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;exit&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;else&lt;/span&gt;
    sleep&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;system&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;PS&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;exit&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
4.signal()的简单示例
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;signal.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; sig_handler&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; sig&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;switch&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sig&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;case &lt;/span&gt;&lt;span style=&quot;color: #007d45;&quot;&gt;SIGHUP&lt;/span&gt;&lt;span style=&quot;color: #e34adc;&quot;&gt;:&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Catch the signal SIGHUP!&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;case &lt;/span&gt;&lt;span style=&quot;color: #007d45;&quot;&gt;SIGINT&lt;/span&gt;&lt;span style=&quot;color: #e34adc;&quot;&gt;:&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Catch the signal SIGINT!&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;


&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;PID is:&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%d&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;getpid&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIGHUP&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;sig_handler&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIGINT&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;sig_handler&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  sleep&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;400&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
5.sigaction()的简单示例
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;signal.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; sig_handler&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;siginfo_t&lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; argc&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;argv&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; sigaction act&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  sigset_t newmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;oldmask&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; rc&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  
  sigemptyset&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;newmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  sigaddset&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;newmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;SIGINT&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  sigaddset&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;newmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;SIGRTMIN&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  sigprocmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIG_BLOCK&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;newmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;oldmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  act&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;sa_sigaction &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; sig_handler&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  act&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;sa_flags &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; SA_SIGINFO&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;

  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sigaction&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIGINT&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #007d45;&quot;&gt;NULL&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;install signal error&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sigaction&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIGRTMIN&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #007d45;&quot;&gt;NULL&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;install signal error&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;pid = &lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%d&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;getpid&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  sleep&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;20&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  sigprocmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIG_SETMASK&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;oldmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #007d45;&quot;&gt;NULL&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
  &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; sig_handler&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; signum&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;siginfo_t &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;info&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;myact&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
     &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
       &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;signum &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; SIGINT&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Got a common signal&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
       &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;else&lt;/span&gt;
          &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Got a real time signal&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
     &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-655168100215426637?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/5_dSrXdCrlfou8pVOBZ75CABqVQ/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/5_dSrXdCrlfou8pVOBZ75CABqVQ/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/5_dSrXdCrlfou8pVOBZ75CABqVQ/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/5_dSrXdCrlfou8pVOBZ75CABqVQ/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/DCEFOrsToJE&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>vim,对不起,我抛弃了你.现在我和emacs好上了</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-10-20T11:53:00Z</updated>
   <id>http://aeternam.github.com./vim,对不起,我抛弃了你.现在我和emacs好上了</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; color: #333333; font-family: Tahoma, Verdana, STHeiTi, simsun, sans-serif; font-size: 14px; line-height: 21px;&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
和emacs正式认识差不多三个月了,而我和vim交往了已经有三年了,像vim的大姨妈vi和vim的小侄子vim-tiny,vim的大爷gvim我和他们也有些交往，可以说感情很深了。突然和vim说分手，我也纠结了很久。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
vim长的娇小长的可爱，人缘很好，要不怎么有那么多的插件呢？&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
跟vim比起来emacs就显得有些富态了。emacs的打开要比vim慢许多，在你的.emacs里配置项很多的情况下，这种现象会更加的明显。但说实话，这种速度完全可以接受，&lt;span style=&quot;color: red; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;难道你想在做一切事情的时候都是它在等你，而你不需要等它吗？&amp;nbsp;&lt;/span&gt;恩，说是可以接受完全是因为有个叫IDE的家伙的存在，比如有点软公司的“visual studio”，哦，卖糕的，我不想说我认识那个家伙。那家伙打开所消耗的时间差不多可以让一个操作系统开机了，安装所消耗的空间也是可以装个xp了，我看他还真把自己当操作系统了，这个。。好像连emacs也不敢公开的表达这样的观点吧，人家可是连咖啡都能煮呢。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
言归，vim，其实我真的下了很大的决心和你说分手。就在前不久我还去我昔日的老大那里看他的vim了呢。老大的vim异常华丽，tiling的wm--xmonad，整个屏幕就一个vim，真是很好看呢！功能很强大，比如可以很方便的看某个函数的定义，和gdb的结合等等。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
说了这么多，我只想说vim是很优秀的，但优秀的东西并不是每个人都喜欢。我说说我为什么最终选择了emacs吧。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
说实话，emacs的门槛非常高，哦，对不起，我可以收回上一句话重新说吗？emacs的门槛非常非常非常他妈的高！比如emacs中最常用的两个键是ctrl和alt，而emacs的理念就是ctrl或者alt配合上另外一个字母键而组成一个指令，亲～你按个CTRL-w（注，相当于剪切）试试，你俺CTRL的应该是小拇指吧，有木有中抽筋的感觉呢？其实我初接触emacs的时候我也被这个震惊了，要知道我平常做的某种运动是整个手掌握着有点累啊，可这就一个手指累啊。后来我发现了这个&lt;a href=&quot;http://rrurl.cn/cSg91n&quot; style=&quot;color: #005eac; cursor: pointer; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;http://emacser.com/capslock.htm&lt;/a&gt;&amp;nbsp;多的我不想多说了，我是个以linux为生的人，在linux下很方便：写进配置文件，开机的时候读一下就ok了。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
其实emacs和vim的共同理念都是让用户编程的时候手不要离开键盘，从而提高效率。（请参看徐宥的系列博文《拔掉你的鼠标！》）&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
像我一样平时码臭代码的工人们，少不了一天要敲无数个括号或者花括号或者引号吧！在vim的insert模式下，我们通常会连输左右括号然后再将光标移到括号中间输入参数吧？（这时候vs跳出来说：我们IDE只需要输半个括号就会补全另外半边了。我：滚开！臭傻逼！你怎么没发明个只需要你抬一次腿就可以穿上的裤纸？）要知道这时候vim用户往往手会离开主键盘区去方向键区按“左”（MAO：纳尼，左？！我把你当腊肉烧了！）可能有些同学小拇指一翘便能够到“左”，不过怎么说你的手都会离开基准键，效率大打折扣；或者另外一种做法是回到命令模式再按下“H”，当然我觉得这么做的同学应该不错吧。而emacs下的方向是靠CTRL和BFPN四个字母共同配合控制的，像上述情况emacs用户的做法是，CTRL-B。效率提升的不只只是一大截！&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
像我一样平时码臭代码的工人们，敲着敲着代码就敲了超过一页的代码了吧！假如此，你的光标是不是始终在屏幕的最下方？解决方法？多敲几个回车，然后回到屏幕中部。恕鄙人愚钝，就想到这个了。而emacs中有个CTRL-L的快捷键可以将编辑内容重绘，你所编辑处就会跑到编辑器中央。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
关于vim和emacs的扩展性我不想比较，我只能说，各有所长！BTW.鄙人经常在emacs下玩游戏。&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
emacs有个buffer的概念，buffer之间切来切去的，好玩！&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
哦，对了，有人跟我说emacs很丑。哎，我的审美观一直都有问题的，丑不丑的自己看吧。上靓照一枚（注：字体是Monaco-Linux！）&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
&lt;/div&gt;
&lt;div style=&quot;margin-bottom: 0.8em; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;
补一枚能看清的!&lt;/div&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-7RVIdebP9Wo/TqlG8Tqq3TI/AAAAAAAAAEI/kbqbtKA3DNA/s1600/1.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://3.bp.blogspot.com/-7RVIdebP9Wo/TqlG8Tqq3TI/AAAAAAAAAEI/kbqbtKA3DNA/s400/1.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;这个是c语言的效果&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-_JQ7RMQ1CBM/TqlG82NaT_I/AAAAAAAAAEM/8WSytd9e-C4/s1600/2.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;158&quot; src=&quot;http://4.bp.blogspot.com/-_JQ7RMQ1CBM/TqlG82NaT_I/AAAAAAAAAEM/8WSytd9e-C4/s400/2.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;我的emacs配置文件&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-3188017955092076259?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/dGjq4eT5_hSwEMywMkwD8ng1OqY/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/dGjq4eT5_hSwEMywMkwD8ng1OqY/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/dGjq4eT5_hSwEMywMkwD8ng1OqY/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/dGjq4eT5_hSwEMywMkwD8ng1OqY/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/NtpU78I-kuo&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>{译文}关于linux信号的一些（三）   什么是signaled，什么是signal Handler</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-10-11T00:00:00+08:00</updated>
   <id>http://aeternam.github.com./{译文}关于Linux信号的一些（三）---什么是signaled，什么是signal-handler</id>
   <content type="html">&lt;br /&gt;
译自&lt;a href=&quot;http://www.linuxprogrammingblog.com/all-about-linux-signals&quot;&gt;http://www.linuxprogrammingblog.com/all-about-linux-signals&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
进程会在这几种情况下接收到信号：&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;当用户在用户空间或者其他的一些进程调用函数比如像 &lt;a href=&quot;http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html&quot;&gt;kill(2)&lt;/a&gt;&amp;nbsp;。&lt;/li&gt;
&lt;li&gt;当进程利用abort(3)给自己发送信号。&lt;/li&gt;
&lt;li&gt;当一个子进程要退出的时候，操作系统发送信号SIGCHLD。&lt;/li&gt;
&lt;li&gt;当终端检测到父进程死亡或者挂起这一事件，会发送信号SIGHUP。&lt;/li&gt;
&lt;li&gt;当用户通过键盘中断程序，会发送信号SIGINT。&lt;/li&gt;
&lt;li&gt;当程序运行异常，信号SIGILL，SIGFPE，SIGSEGV当中会有一个被发送。&lt;/li&gt;
&lt;li&gt;当一个程序存取的内存是被 mmap(2) 映射但目前不可用（比如说文件被其他进程删节的时候）-- 真正令人恶心的情况是当用 mmap() 去读取文件的时候。现在还没有好的方法去处理这种情况。&lt;/li&gt;
&lt;li&gt;当一个分析器比如gprof在被使用的时候，程序偶尔会收到信号SIGPROF。这有时是有问题的，比如当你忘记去适当地去处理被中断的系统函数像 read(2) (errno == EINTR)。&lt;/li&gt;
&lt;li&gt;当你使用 write(2) 或者其他类似的传送数据的函数而且没有人去接受这个数据，信号SIGPIPE就会被发出。这种情况是非常常见的而且你必须记住那些函数不会只因为错误而退出，并且设置了errno变量，但也会引发信号SIGPIPE被传递到这个程序。举个例子，当你写入数据到标准输出并用管道符将你的输出重定向到另外一个程序。如果这个程序退出而你正试图去向它传送数据，信号SIGPIPE就会被发送到你的进程。信号还会被用于返回值为错误的正常函数，因为这个事件是异步的，所以你无法确切的辨别多大的数据已经被成功的传送。这种情况也通常会在你在给一个socket发送的数据的时候发生。这是因为数据是有缓冲 和/或 以线性的发送的，所以没有马上被发送到目标，而且操作系统可以实现在发送信号的函数退出不发送信号。&lt;/li&gt;
&lt;/ul&gt;
想要查看完整的signal信息，请参阅 signal(7) man手册。&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: x-large;&quot;&gt;Signal handlers&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;传统的signal()已经被弃用&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
signal(2)函数是最古老的也是最简单的注册signal handler的方式，但它已经被弃用了。被弃用的原因很少，不过最重要的一点，这种传统的UNIX的实现方式会在信号接收完毕之后把signal handler重置成它的默认值。如果你需要分别地处理每一个传递到你的程序的信号比如处理信号SIGCHLD去找到一个将要死去的进程，这是有竞争的。要这么做的话，你将会让signal handler对自己重新设置一遍，而另外一个信号可能在你调用函数 signal(2) 之前就已经到达该进程了。这种现象会因平台的不同而不同。此外，signal函数缺少一些在 sigaction(2) 中你将来可能会用到的特性。&lt;/div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;设置信号动作的推荐方法：sigaction&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
函数 sigaction(2) 是一个更好的处理信号动作的方法。它的函数原型：&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: black; color: #d1d1d1; font-family: monospace; white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; sigaction &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; signum&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; sigaction &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; sigaction &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;oldact&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
正如你所看到的，你没直接向signal handler传递指针，而是一个叫做sigaction的struct的对象。这个struct的定义如下：&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; sigaction &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;     &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;sa_handler&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;     &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;sa_sigaction&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; siginfo_t &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        sigset_t   sa_mask&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt;        sa_flags&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;     &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;sa_restorer&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
更多关于这个struct字段的描述请参阅 sigaction(2) man手册。最重要的几个字段：&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;sa_handler - 这是一个指向你的处理函数的指针，它有跟 signal(2) 的handler一样的函数原型。&lt;/li&gt;
&lt;li&gt;sa_sigaction - 这是两个运行signal handler方法的其中一个。它含有除signal number之外的两个参数，其中&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: Georgia, 'Times New Roman', serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: blue;&quot;&gt;siginfo_t&lt;/span&gt; &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #38761d;&quot;&gt;*&lt;/span&gt;&lt;/span&gt; 是非常有趣的。它提供了更多的关于接收到的信号的信息，我在后面会详细介绍。&lt;/li&gt;
&lt;li&gt;sa_mask - 让你准确地设置在handler执行时阻塞的信号。此外，如果你不用SA_NODEFER标志的话，那个被触发的信号将会被阻塞。&lt;/li&gt;
&lt;li&gt;sa_flags - 让你修改处理进程的信号的行为。关于这个字段的详细信息，请参阅man手册。要使用sa_sigaction的话你一定会用到SA_SIGINFO标志。&lt;/li&gt;
&lt;/ul&gt;
假如你不会用到任何一个sigaction的额外特性，signal(2) 和 sigaction(2)还有什么不同之处呢？答案是：可移植性和没有竞争状况（译者注：原文为no race conditions）。这种在signal handler被调用后会被重置的问题不会影响到 sigaction(2) ，因为默认的行为不会去重置handler，也不会在它执行的时候去阻塞信号。所以没有进程间没有竞争，而且它的行为在POSIX中有详细记录。另外一个不同，使用 signal(2) 的话有些系统调用会重新启动，但使用 sigaction(2) 的话则不会。&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;举例说明sigaction()的使用&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
看 &lt;a href=&quot;http://www.linuxprogrammingblog.com/code-examples/sigaction&quot;&gt;使用sigaction()的例子&lt;/a&gt;&amp;nbsp;（见下），然后使用一些其他的参数设置一个signal handler。&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #9999a9;&quot;&gt;/* Example of using sigaction() to setup a signal handler with 3 arguments&lt;/span&gt;
&lt;span style=&quot;color: #9999a9;&quot;&gt;&amp;nbsp;* including siginfo_t.&lt;/span&gt;
&lt;span style=&quot;color: #9999a9;&quot;&gt;&amp;nbsp;*/&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;signal.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;string.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; hdl &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; sig&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; siginfo_t &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;siginfo&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;context&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Sending PID: &lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%ld&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;, UID: &lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;%ld&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt;
            &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;long&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;siginfo&lt;span style=&quot;color: #d2cd86;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;gt;&lt;/span&gt;si_pid&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;long&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;siginfo&lt;span style=&quot;color: #d2cd86;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;gt;&lt;/span&gt;si_uid&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; argc&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;argv&lt;span style=&quot;color: #d2cd86;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; sigaction act&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;memset&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #00c4c4;&quot;&gt;'\0'&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;sizeof&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #9999a9;&quot;&gt;/* Use the sa_sigaction field because the handles has two additional parameters */&lt;/span&gt;
    act&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;sa_sigaction &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;hdl&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #9999a9;&quot;&gt;/* The SA_SIGINFO flag tells sigaction() to use the sa_sigaction field, not sa_handler. */&lt;/span&gt;
    act&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;sa_flags &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; SA_SIGINFO&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sigaction&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIGTERM&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #007d45;&quot;&gt;NULL&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;sigaction&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
        sleep &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
在这个例子中，我们使用了在用SIGTERM情况下的三种参数。如果我们不设置SA_SIGINFO标志的话，我们将会用到一个比较传统版本的参数，并利用sa_handler字段的设置把这个指针传给它。对于 signal(2) 来说那将是个替换。你可以尝试去运行它并用 kill PID 来看会发生什么。&lt;br /&gt;
&lt;br /&gt;
在signal handler中，我们会从 siginfo_t *中读取两个字段去查看发送者的PID和UID。这个struct有更多的字段，我稍后会具体介绍它。&lt;br /&gt;
&lt;br /&gt;
函数 sleep(3) 在一个循环中被使用，是因为当信号到达的时候它会被中止，需要再次被调用。&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;SA_SIGINFO handler&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
在以前的例子中，SA_SIGINFO 被用来作为一个参数向signal handler传递更多的信息。我们看到结构体siginfo_t中含有si_pid和si_uid两个字段（发送信号的进程的PID和UID），但还有更多。它们所有都在 sigaction(2) man手册中有说明。在Linux中，只有 si_signo(signal number)和si_code(signal code)对于所有的信号都是有效的。其他字段的存在由信号的类型决定。一些其他的字段：&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;si_code - 信号被发送的原因。如果信号由 kill(2) 或者 raise(3) 发送，它的值或许是SI_USER；如果是内核发送的则值是SI_KERNEL或者别的。对于一些信号so_code有些特殊的值，比如ILL_ILLADR会告诉你SIGILL是由于非法的寻址方式而发送的。&lt;/li&gt;
&lt;li&gt;对于信号SIGCHLD，字段si_status,si_utime,si_stime会被填充，并且包含退出状态的信息，或者死亡进程的信号，用户和消耗的系统时间。&lt;/li&gt;
&lt;li&gt;如果是SIGILL，SIGFPE，SIGSEGV，SIGBUS，si_addr会包含导致出错的内存地址。&lt;/li&gt;
&lt;/ul&gt;
我们会在后面看到更多关于使用 siginfo_t 的例子。&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;编译器优化和signal handler中的数据&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
让我们来看下面的例子：&lt;br /&gt;
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;signal.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;string.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; exit_flag &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; hdl &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; sig&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    exit_flag &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; argc&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;argv&lt;span style=&quot;color: #d2cd86;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; sigaction act&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;memset&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #00c4c4;&quot;&gt;'\0'&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;sizeof&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    act&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;sa_handler &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;hdl&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sigaction&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIGTERM&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;act&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #007d45;&quot;&gt;NULL&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;sigaction&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;!&lt;/span&gt;exit_flag&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
这段程序干了什么？这取决于编译器优化的设置。没有优化的话，它会执行个循环直到进程接收到SIGTERM或者其他终断进程的信号而且不是一个handler。当你编译它的时候使用gcc的 -O3的参数，它在接收信号SIGTERM后不会退出。为什么？因为 while循环通过这种方式被优化--变量exit_flags被载入到处理器注册一次但在循环中不会读取内存。编译器不知道循环不是程序在执行这个循环存取这个变量的唯一的区域。在这些情况下--在一个也可以被其他程序存取的signal handler中修改一个变量，你必须记的去指示编译器当读或写的时候总是存取这些在内存中的变量。你应该在声明变量的时候使用关键字 &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000;&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;：&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: black; color: #d1d1d1; font-family: monospace; white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; exit_flag &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
做了这样的更改之后，一切都按照预期的运行了。&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;原子类型&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
有一种数据类型被定义成在signal handler和代码中去确保被自动读和写：sig_atomic_t。这种类型的大小(size)没有被定义，但它是整形。理论上说，这是唯一的当它同样被signal handler存取的时候你可以安全的分配并读取的类型。记住这些：&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;它不会像互斥量一样工作：它是被确保读或写这种类型转化成一个不能被中断的操作，代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;sig_atomic_t&lt;/span&gt; i &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;void&lt;/span&gt; sig_handler &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; sig&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;i&lt;span style=&quot;color: #d2cd86;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #9999a9;&quot;&gt;// ...&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
这样是不安全的：在if语句中存在读和写(update)，但只有单独的读和单独的写是原子类型的。&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;不要试图去使用这个类型在一个多线程的程序中作为一个可以被不借助于互斥量而使用的类型。它只是为signal handler所用而且和互斥量无关！&lt;/li&gt;
&lt;li&gt;你不用担心在signal handler中数据是否被修改或者被读取，如果它发生了，只会在信号被阻塞的时候。后面我介绍如何去阻塞信号。但你将仍需要 &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000;&quot;&gt;volatile&lt;/span&gt; 关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;信号安全的(signal-safe) 函数&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
你不能在signal handler中干所有的事情。请记住，你的程序被中断，而你不知道正在被修改中的数据对象。它可能不是你的代码，而是你正在使用的一个库或者c的标准库。事实上，有一个很短的函数清单，你可以在 signal(7) 中安全地调用signal handler。例如，你可以用 open(2) 打开一个文件，用 unlink(2) 删除一个文件，调用_exit(2) （不是 exit(3)!）等等。在实践中，这份清单是有限的，你能做的只是设置一些全局标志以通知在做像退出之类事情的进程。另一方面 wait(2) 和 waitpid(2) 函数可以使用，所以你可以通过SIGCHLD对死亡进程做清理，unlink(2) 是可用的，这样你可以删除一个pid文件等等。&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;处理信号的另一种方法: signalfd()&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
signalfd(2) 是一种非常符合linux特性的系统调用，在2.6.22版本的内核中都有它，signalfd(2)允许通过文件描述符(file descriptor)来接受信号。这种方法实现了不用handler函数就能以同步的方式处理信号。让我们来看一个如何使用signalfd()的例子：&lt;br /&gt;
&lt;pre style=&quot;background: #000000; color: #d1d1d1;&quot;&gt;&lt;span style=&quot;color: #9999a9;&quot;&gt;/* Example of use of a Linux-specific call - signalfd() to handle signals using&lt;/span&gt;
&lt;span style=&quot;color: #9999a9;&quot;&gt;&amp;nbsp;* a file descriptor.&lt;/span&gt;
&lt;span style=&quot;color: #9999a9;&quot;&gt;&amp;nbsp;*/&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;unistd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;signal.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;sys/signalfd.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008073;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #008073;&quot;&gt;include &lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #40015a;&quot;&gt;string.h&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&amp;gt;&lt;/span&gt;
 
&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; argc&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;*&lt;/span&gt;argv&lt;span style=&quot;color: #d2cd86;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;int&lt;/span&gt; sfd&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    sigset_t mask&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #9999a9;&quot;&gt;/* We will handle SIGTERM and SIGINT. */&lt;/span&gt;
    sigemptyset &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;mask&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    sigaddset &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;mask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; SIGTERM&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    sigaddset &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;mask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; SIGINT&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #9999a9;&quot;&gt;/* Block the signals thet we handle using signalfd(), so they don't&lt;/span&gt;
&lt;span style=&quot;color: #9999a9;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* cause signal handlers or default signal actions to execute. */&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sigprocmask&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;SIG_BLOCK&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;mask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #007d45;&quot;&gt;NULL&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;sigprocmask&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
    &lt;span style=&quot;color: #9999a9;&quot;&gt;/* Create a file descriptor from which we will read the signals. */&lt;/span&gt;
    sfd &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; signalfd &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;mask&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sfd &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;signalfd&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
 
        &lt;span style=&quot;color: #90b0e0;&quot;&gt;/** The buffor for read(), this structure contains information&lt;/span&gt;
&lt;span style=&quot;color: #90b0e0;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* about the signal we've read. */&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;struct&lt;/span&gt; signalfd_siginfo si&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
        ssize_t res&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
        res &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; read &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sfd&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;amp;&lt;/span&gt;si&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;sizeof&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;si&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;res &lt;span style=&quot;color: #d2cd86;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;perror&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;read&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;res &lt;span style=&quot;color: #d2cd86;&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;sizeof&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;si&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;fprintf&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;stderr&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Something wrong&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;si&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;ssi_signo &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; SIGTERM&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Got SIGTERM&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;si&lt;span style=&quot;color: #d2cd86;&quot;&gt;.&lt;/span&gt;ssi_signo &lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;=&lt;/span&gt; SIGINT&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
 
 
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;printf&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Bye!&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #b060b0;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;fprintf&lt;/span&gt; &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;stderr&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #00c4c4;&quot;&gt;Got some unhandled signal&lt;/span&gt;&lt;span style=&quot;color: teal;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #02d045;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
            &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
        &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
 
    &lt;span style=&quot;color: #9999a9;&quot;&gt;/* Close the file descriptor if we no longer need it. */&lt;/span&gt;
    close &lt;span style=&quot;color: #d2cd86;&quot;&gt;(&lt;/span&gt;sfd&lt;span style=&quot;color: #d2cd86;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
 
    &lt;span style=&quot;color: #e66170; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008c00;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #b060b0;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #b060b0;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;br /&gt;
首先，我们要使用sigprocmask(2)来阻塞我们想要用signalfd(2)处理的信号。sigprocmask(2)这个函数会在后面讲解。然后我们调用signalfd(2)去创建一个用来读取传递进来的信号的文件描述符。这时候假如SIGTERM或者SIGINT传递进来，进程也不会因此而被中断，不会去调用任何handler。这个信号会被排队，而且你能通过描述符 sfd 看到它的信息。你必须提供一个足够大的buffer，让它能够读取 struct signalfd_siginfo，struct signalfd_siginfo中存放的信息和我们之前讨论过的 siginfo_t 相似。不同之处在于，字段的名称可能会有所不同(比如ssi_signo代替了si_signo)。有趣的是，sfd描述符的自身的行为和使用，都可以像其他任何一个文件描述符一样，特别的，你可以这样：&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;可以在select(2),poll(2)等类似的函数中使用。&lt;/li&gt;
&lt;li&gt;可以让它不能被阻塞。&lt;/li&gt;
&lt;li&gt;可以创建多个sfd，每个sfd处理不同的信号并返回不同的描述符，多个不同的描述符为select(2)所用。&lt;/li&gt;
&lt;li&gt;在fork()之后，文件描述符没有被关闭，所以子进程可以读取到父进程发送的信号。&lt;/li&gt;
&lt;/ul&gt;
这个在主函数循环中执行poll(2)之类的单进程服务器(译注：原文为 signal-process server，作者本意是指这个服务器上跑的程序只会有一个进程)上会非常有用。它简化了处理信号的过程，因为信号描述符可以被加进poll的描述符数组中，也可以不被异步事件所影响、像其他描述符一样地被处理。当你准备好了的时候你再处理信号，因为程序是不会被中断的。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-5964159289974478268?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/41N7U-7CdzGONPN5o_uThSoNIqo/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/41N7U-7CdzGONPN5o_uThSoNIqo/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/41N7U-7CdzGONPN5o_uThSoNIqo/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/41N7U-7CdzGONPN5o_uThSoNIqo/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/7MtYXCGbOVg&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>{译文}关于linux信号的一些（二）   介绍</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-10-10T00:00:00+08:00</updated>
   <id>http://aeternam.github.com./{译文}关于Linux信号的一些（二）---介绍</id>
   <content type="html">&lt;br /&gt;
译自:&lt;a href=&quot;http://www.linuxprogrammingblog.com/all-about-linux-signals&quot;&gt;http://www.linuxprogrammingblog.com/all-about-linux-signals&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;这篇文章包含的内容&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;
这篇文章描述了信号在Linux中是如何工作的以及如何使用POSIX API去处理信号。我会讲到在所有现代Linux系统中用到的函数,但它也应该符合大部分POSIX系统,如果不是的话,我会明确地说明。旧版本的函数没有包括进来。另外阅读这篇文章需要一些关于信号的基础知识。&lt;br /&gt;
&lt;br /&gt;
((EOF))&lt;br /&gt;
&lt;br /&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-28121380104274980?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Toi1NVne_rDFld_XBZkcB6Y6kvM/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Toi1NVne_rDFld_XBZkcB6Y6kvM/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Toi1NVne_rDFld_XBZkcB6Y6kvM/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Toi1NVne_rDFld_XBZkcB6Y6kvM/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/6C3o9DGIg9A&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>{译文}关于linux信号的一些（一）  关于信号</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-10-10T00:00:00+08:00</updated>
   <id>http://aeternam.github.com./{译文}关于Linux信号的一些（一）--关于信号</id>
   <content type="html">&lt;div&gt;
&lt;br /&gt;
译自：&lt;a href=&quot;http://www.linuxprogrammingblog.com/all-about-linux-signals&quot;&gt;http://www.linuxprogrammingblog.com/all-about-linux-signals&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
在多数情况下，如果你想在你的程序里写一个简单的signal handler（注:国内的大部分译作将此翻译为信号处理函数），比如这样：&lt;br /&gt;
&lt;blockquote class=&quot;tr_bq&quot;&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
void handler (int sig)&lt;/div&gt;
&lt;/blockquote&gt;
然后,当有信号传递给这个进程的时候使用系统函数 &lt;a href=&quot;http://www.kernel.org/doc/man-pages/online/pages/man2/signal.2.html&quot;&gt;signal(2)&lt;/a&gt;&amp;nbsp;去执行它。这算是最简单的情况了，但是信号远比这样有趣多了！这篇文章所包含的内容是非常有帮助的，比如当你在写一个daemon的时候很可能需要恰当地处理对于你的程序产生的中断，使其免于对当前的操作或者整个程序的中断。&lt;br /&gt;
&lt;br /&gt;
((EOF))&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-5591717951033009503?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/g2dtmU9woKimsZu84ttcA939iHE/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/g2dtmU9woKimsZu84ttcA939iHE/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/g2dtmU9woKimsZu84ttcA939iHE/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/g2dtmU9woKimsZu84ttcA939iHE/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/3Tb4eLFtqFM&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>/etc/fstab文件写错了，该如何是好</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-08-24T12:03:00Z</updated>
   <id>http://aeternam.github.com./etcfstab文件写错了，该如何是好</id>
   <content type="html">&lt;br /&gt;
&lt;br /&gt;
由于fstab写错了，系统进不去，只能进临时的shell。不过挂载的系统都是只读的，肿么办？&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
在shell输入命令&lt;br /&gt;
&lt;br /&gt;
#mount –o remount rw /&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
这样系统就可写了，然后把错误的改掉，输入reboot重启就ok了！&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-817637027450024410?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/NbywgLXfXD7FkUTQgRlrJgtZlmk/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/NbywgLXfXD7FkUTQgRlrJgtZlmk/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/NbywgLXfXD7FkUTQgRlrJgtZlmk/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/NbywgLXfXD7FkUTQgRlrJgtZlmk/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/btE-JSYD0Bw&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>关于SYSTEM-CONFIG-KICKSTART错误</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2011-08-17T12:06:00Z</updated>
   <id>http://aeternam.github.com./关于SYSTEM-CONFIG-KICKSTART错误</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; color: #333333; font-family: verdana, helvetica, sans-serif; font-size: 12px; line-height: 18px;&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div style=&quot;list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;
&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;假如在RHEL图形界面下运行system-config-kickstart,出现如下错误。&lt;/span&gt;&lt;/div&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: #9b00d3; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;system-config-kickstart&lt;/span&gt;
Loaded plugins: rhnplugin
This system &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;is&lt;/span&gt; not registered with RHN.
RHN support will be disabled.
Traceback (most recent call last):
  File &lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&quot;/usr/bin/system-config-kickstart&quot;&lt;/span&gt;, line 82, &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; ?
    kickstartGui.kickstartGui(file)
  File &lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&quot;/usr/share/system-config-kickstart/kickstartGui.py&quot;&lt;/span&gt;, line 171, &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; __init__
    self.packages_class = packages.Packages(xml, self.kickstartData)
  File &lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&quot;/usr/share/system-config-kickstart/packages.py&quot;&lt;/span&gt;, line 172, &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; __init__
    self.y = sckYumBase(pbar)
  File &lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&quot;/usr/share/system-config-kickstart/packages.py&quot;&lt;/span&gt;, line 147, &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; __init__
    self.doGroupSetup()
  File &lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&quot;/usr/lib/python2.4/site-packages/yum/__init__.py&quot;&lt;/span&gt;, line 520, &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; doGroupSetup
    &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;return&lt;/span&gt; self._getGroups()
  File &lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&quot;/usr/lib/python2.4/site-packages/yum/__init__.py&quot;&lt;/span&gt;, line 581, &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; _getGroups
    raise Errors.GroupsError, _(&lt;span class=&quot;str&quot; style=&quot;color: #006080; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;'No Groups Available in any repository'&lt;/span&gt;)
yum.Errors.GroupsError: No Groups Available &lt;span class=&quot;kwrd&quot; style=&quot;color: blue; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;in&lt;/span&gt; any repository&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;然后会跳出来一个窗口说，retrieving package information。然后kickstart就会&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;关&lt;/span&gt;&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;闭了。&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;出问题的原因是repo文件的问题，需要检查下。&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;color: red; font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;最简单的方法是把/etc/yum.repos.d/目录下面的所有repo文件都重命名到非repo文&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;csharpcode&quot; style=&quot;background-color: white; color: black; font-family: consolas, 'Courier New', courier, monospace; font-size: small; list-style-image: initial; list-style-position: initial; list-style-type: none; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;&lt;span style=&quot;color: red; font-family: 幼圆; font-size: medium; list-style-image: initial; list-style-position: initial; list-style-type: none; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-decoration: none;&quot;&gt;件。kickstart用完后再改回来。&lt;/span&gt;&lt;/pre&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-8080026836546441220?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Bh9w0A3lRIBAODHV4MQ2cQ4NdnI/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Bh9w0A3lRIBAODHV4MQ2cQ4NdnI/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Bh9w0A3lRIBAODHV4MQ2cQ4NdnI/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Bh9w0A3lRIBAODHV4MQ2cQ4NdnI/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/dIB7J6Gq174&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 <entry>
   <title>关于Gvim工具栏菜单不能正常显示的解决办法</title>
   <link href="http://aeternam.github.comtitle.html"/>
   <updated>2010-09-28T12:26:00Z</updated>
   <id>http://aeternam.github.com./关于Gvim工具栏菜单不能正常显示的解决办法</id>
   <content type="html">&lt;br /&gt;&lt;br /&gt;解决方法： &lt;br /&gt;&lt;br /&gt;&lt;ol&gt;
&lt;li&gt;&amp;nbsp;cd /usr/share/vim/vim72/lang sudo&amp;nbsp;&lt;/li&gt;
&lt;/ol&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; ln -s menu_zh_cn.utf-8.vim menu_zh_cn.utf8.vim&lt;br /&gt;&lt;ol&gt;
&lt;li&gt;&amp;nbsp;或者删除语言包，默认就会显示英文，不会出现无法正常显示的问题&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6372431252755588535-8301831250794145244?l=smilejustforfan.blogspot.com' alt='' /&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Y6Z4CZtYAQhqf6dH1RzorPeX0JE/0/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Y6Z4CZtYAQhqf6dH1RzorPeX0JE/0/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://feedads.g.doubleclick.net/~a/Y6Z4CZtYAQhqf6dH1RzorPeX0JE/1/da&quot;&gt;&lt;img src=&quot;http://feedads.g.doubleclick.net/~a/Y6Z4CZtYAQhqf6dH1RzorPeX0JE/1/di&quot; border=&quot;0&quot; ismap=&quot;true&quot;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/RobbyLeesBolgsmilejustforfan/~4/VLbCCaDYyTw&quot; height=&quot;1&quot; width=&quot;1&quot;/&gt;</content>
 </entry>
 
 
</feed>